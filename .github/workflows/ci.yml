name: AHCAgent CI

# CIをトリガーするイベントを指定
on:
  push:
    branches: [ main ] # mainブランチへのpush
  pull_request:
    branches: [ main ] # mainブランチへのプルリクエスト

jobs:
  lint_and_test:
    # ジョブの名前 (Pythonのバージョンを含む)
    name: Lint & Test (Python ${{ matrix.python-version }})
    # 実行環境
    runs-on: ubuntu-latest
    # テストするPythonのバージョンをマトリックスで指定
    strategy:
      matrix:
        python-version: ["3.8", "3.10", "3.12"]

    steps:
    # 1. リポジトリのコードをチェックアウト
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. 指定したバージョンのPythonセットアップ
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # pipの依存関係をキャッシュ

    # 3. 依存関係のインストール
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" # パッケージ自体と開発用依存関係をインストール

    # 4. Ruffでリンターを実行
    - name: Lint with Ruff
      run: |
        ruff check .
        ruff format --check .

    # 5. Pytestでテストを実行
    - name: Run Pytest
      run: |
        pytest

  # TODO 費用が掛かるため一旦無効化
  # validate_integration:
  #   # ジョブの名前
  #   name: Validate Script (Integration Test)
  #   # 実行環境 (Dockerが利用可能なubuntu-latest)
  #   runs-on: ubuntu-latest
  #   # lint_and_testジョブ（すべてのPythonバージョン）が成功した後に実行
  #   needs: [lint_and_test]

  #   steps:
  #   # 1. リポジトリのコードをチェックアウト
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   # 2. Python 3.10 をセットアップ (validate.shがこのバージョンで動作することを想定)
  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: "3.10"
  #       cache: 'pip'

  #   # 3. パッケージのインストール (validate.sh内でも実行されるが、念のため)
  #   - name: Install package
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -e "."

  #   # 4. validate.sh に実行権限を付与
  #   - name: Make validate.sh executable
  #     run: chmod +x validate.sh

  #   # 5. validate.sh を実行 (E2E風テスト)
  #   - name: Run validation script
  #     env:
  #       # CI環境でLLMの実際呼び出しを避けるためのダミー設定など
  #       # 必要に応じて、secrets.YOUR_DUMMY_API_KEY のような形でダミーのAPIキーを設定
  #       AHC_LLM_MODEL: "mock_model_for_ci" # LLMClientが特別扱いするモデル名(要実装) or 単にエラーにならないように
  #       AHC_DOCKER_ENABLED: "true"
  #       # OPENAI_API_KEY: "sk-dummy" # LiteLLMがエラーにならないようにダミーキーを設定
  #     run: |
  #       # validate.sh 内のハードコードされたパスをCI環境に合わせて修正
  #       # 例: /home/ubuntu/ahc_agent_cli -> GITHUB_WORKSPACE (カレントディレクトリ)
  #       #     sample_problem.md のパスも同様に修正
  #       # これらの修正は、validate.sh自体をCIフレンドリーに改修するのが理想的です。
  #       echo "Patching validate.sh for CI environment..."
  #       sed -i 's|cd /home/ubuntu/ahc_agent_cli|cd ${GITHUB_WORKSPACE}|g' validate.sh
  #       sed -i 's|/home/ubuntu/ahc_agent_cli/sample_problem.md|${GITHUB_WORKSPACE}/sample_problem.md|g' validate.sh
  #       echo "Running validate.sh..."
  #       ./validate.sh
